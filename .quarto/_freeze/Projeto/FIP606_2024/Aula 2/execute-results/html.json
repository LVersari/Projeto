{
  "hash": "d9711639396b63ac04be6f342b6e8f53",
  "result": {
    "markdown": "---\nformat: html\neditor: visual\nmessage: false\nwarning: false\n\n---\n\n\n# 1. RStudio:\nA interface do RStudio é normalmente dividida em 4 partes, conforme apresentado na imagem abaixo pelos números 1, 2, 3 e 4.\n\n::: {.cell hash='Aula-2_cache/html/unnamed-chunk-1_04dca825857a1ad726a0cdbc7a2698dc'}\n::: {.cell-output .cell-output-stdout}\n```\n  format width height colorspace matte filesize density\n1    PNG  1366    768       sRGB FALSE   107329   38x38\n```\n:::\n\n::: {.cell-output-display}\n![](Aula-2_files/figure-html/unnamed-chunk-1-1.png){width=683}\n:::\n:::\n\n\n1 - **script**, nessa janela é possível colocar em cada linha códigos e o `Enter`é utilizado para quebra de linha. Para executar o comando usa `Control+Enter` ou clique em `Run` (**⊳**) no canto superior direito do chunck. \n\n2 - **console**, trabalhar no console é muito limitado, pois as instruções devem ser inseridas uma por uma. Para executar o comando preciona `Ènter`.\n\n3 - **Environment**, é onde ficam armazendos os objetos criados, bases de dados importadas, etc. **History**, onde fica o histórico dos comandos executados.\n\n4 - **Files, Plots, Packages, Help, Viewer**, em `Files` encontra as pastas e arquivos carregados no RStudio. A visualização de grãficos em `Plots`, buscar pacotes instalados em `Packages`, para saber mais sobre as funções em `Help` e visualizar imagens carregadas em `Viewer`.\n\n## 2. Trabalhe de forma organizada\n\nPara isso pode ser criado um projeto clicando na barra de ferramentas superior em `File` e em seguida em `New project`. \n\n::: {.cell hash='Aula-2_cache/html/unnamed-chunk-2_60a5f38df5c0a0679561243f4cc251c3'}\n::: {.cell-output .cell-output-stdout}\n```\n  format width height colorspace matte filesize density\n1    PNG  1366    768       sRGB FALSE   113790   38x38\n```\n:::\n\n::: {.cell-output-display}\n![](Aula-2_files/figure-html/unnamed-chunk-2-1.png){width=683}\n:::\n:::\n\n\nAssim você pode trabalhar com diferentes cojuntos de dados ao mesmo tempo sem que ocorra a interveção ou conflitos entre os conjuntos de dados. Recomenda para cada trabalho, separar em projetos. Ex: um projeto para conjuntos de dados referente a pesquisa **Monitoramento da sensibilidade in vitro de** *Colletotrichum truncatum* **à fungicidas** e outro projeto para o conjunto de dados da pesquisa **Épocas de aplicações de fungicidas multissítios no controle de mancha alvo na cultura da soja**.\n\nApós criar o projeto inicia o trabalho com o conjunto de dados, criando uma página para desenvolver o spript, clicando em `File` e depois em `New File`, podendo selecionar `Quarto Document...` ou `R Markdown`.\n\n::: {.cell hash='Aula-2_cache/html/unnamed-chunk-3_b1e996a8e34490d902a25de3507b035a'}\n::: {.cell-output .cell-output-stdout}\n```\n  format width height colorspace matte filesize density\n1    PNG  1366    768       sRGB FALSE   110539   38x38\n```\n:::\n\n::: {.cell-output-display}\n![](Aula-2_files/figure-html/unnamed-chunk-3-1.png){width=683}\n:::\n:::\n\n\n\n## 3. Diferença de Quarto Document e R Markdown\n\nO Quarto é uma versão mais avançada e atualizada do R Markdown, com novos recursos, podendo renderizar a maioria dos arquivos `**.Rmd**` existentes sem modificação, possibilitando a criação de relatórios ou textos em diferentes formatos (HTML, PDF, Word e outros). Nessa página Web foi utilizado apenas Quarto Document. \n\n## 4. Chunk \n\n::: {.cell hash='Aula-2_cache/html/unnamed-chunk-4_3fd38b654a6c3e34e6033630823ecadc'}\n\n:::\n\n\nAcima foi inserido um chuck. Chunck é um bloco de código dentro de um documento R Markdown (ou Quarto) que permite a execução de código R ou de outros idiomas suportados (como Python, SQL, etc.) dentro de um documento de texto. Um atalho que pode ser usado para sua criação é o **Ctrl + Alt + I** ou inserir o chunck conforme mostra a imagem a seguir:\n\n::: {.cell hash='Aula-2_cache/html/unnamed-chunk-5_f9bd0b97b8f3b774203b56157a3fa661'}\n::: {.cell-output .cell-output-stdout}\n```\n  format width height colorspace matte filesize density\n1    PNG  1366    768       sRGB FALSE    99562   38x38\n```\n:::\n\n::: {.cell-output-display}\n![](Aula-2_files/figure-html/unnamed-chunk-5-1.png){width=683}\n:::\n:::\n\n\n## 5. Ferramentas de Texto\n**Negrito: inserir antes e depois do texto que deseja apresentar em negrito, dois asteriscos ** **.\n*Itálico*: inserir antes e depois do texto que deseja apresentar em itálico, um asteriscos * *.\nTítulo e subtítulos: Fora do chunck, para visualizar o texto como título, colocar um **#** antes e um **#** depois do texto.\nPara subtítulos, colocar dois **##** antes e dois **##** depois texto.\nComentários: dentro do chunck escrever comentários utilizando antes do texto #.\nTexto: para rodar o código do chunck como texto, ex: nome da planilha excel, utilizar aspas duplas **\"** antes e depois do texto.\n`Funções`: fora do chunck, para destacar uma função no texto, inserir antes e depois do texto uma aspas **`**.\n\n## 6. Atribuição de Valores\n\nQuando queremos atribuir um valor para algum nome, podemos utilizar `<-`. Desse modo, se quisermos trabalhar com esses valores ou conjunto de valores atribuídos a um nome, podemos utilizar diretamente o nome, sem precisar repetir o valor.\n\n::: {.cell hash='Aula-2_cache/html/unnamed-chunk-6_94c82cf6f1666b76b70cf7a3e2a20017'}\n\n```{.r .cell-code}\nx <- 10\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n\n```{.r .cell-code}\ny <- x*10\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100\n```\n:::\n\n```{.r .cell-code}\nz <- x*y\nz\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1000\n```\n:::\n:::\n\n\n## 7. Conjunto de valores\nPara criar um conjunto de valores, pode-se utilizar `c()`e colocar os valores desejados. Caso os valores sejam contínuos, pode-se agrupá-los usando :, desse modo o conjunto será formado por todos os valores que estão entre os dois números colocados.\n\n::: {.cell hash='Aula-2_cache/html/unnamed-chunk-7_37d02a69eeb5a0763dcd98c0304baaf9'}\n\n```{.r .cell-code}\nA <- c(1:10)\nA \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n:::\n\n```{.r .cell-code}\nB <- c(11:20)\nB\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 11 12 13 14 15 16 17 18 19 20\n```\n:::\n:::\n\n\n## 8. Data frame\nO **data frame** é é o objeto que guarda o conjunto de dados na forma de tabela (tabulares ou planos). Podendo armazenar vetores de diferentes tipos (caracteres, numéricos, lógico e etc) nas suas colunas. Ele pode ser criado por meio da junção de dois ou mais conjunto de dados, usando a função `data.frame()`, mas, para isso, o número de valores presentes nos conjuntos deve ser o mesmo.\n\n::: {.cell hash='Aula-2_cache/html/unnamed-chunk-8_553cacae397b217ba3c73c07074adbf3'}\n\n```{.r .cell-code}\ndf <- data.frame(A,B)\ndf \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    A  B\n1   1 11\n2   2 12\n3   3 13\n4   4 14\n5   5 15\n6   6 16\n7   7 17\n8   8 18\n9   9 19\n10 10 20\n```\n:::\n:::\n\n\n## 9. Pipe `|>`\nUtilizado quando desejar que todas as funções executadas estejam se referindo a um determinado data frame sem precisar chamá-lo repetidamente, podemos usar um pipe, precisando `Ctrl+Shift+M`. O pipe indica que todas as funções abaixo dele estão se referindo ao data frame especificado.\n\n::: {.cell hash='Aula-2_cache/html/unnamed-chunk-9_0c95498f77121da4598ad61384b5d799'}\n\n```{.r .cell-code}\ndf2 <- cars\ncars\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   speed dist\n1      4    2\n2      4   10\n3      7    4\n4      7   22\n5      8   16\n6      9   10\n7     10   18\n8     10   26\n9     10   34\n10    11   17\n11    11   28\n12    12   14\n13    12   20\n14    12   24\n15    12   28\n16    13   26\n17    13   34\n18    13   34\n19    13   46\n20    14   26\n21    14   36\n22    14   60\n23    14   80\n24    15   20\n25    15   26\n26    15   54\n27    16   32\n28    16   40\n29    17   32\n30    17   40\n31    17   50\n32    18   42\n33    18   56\n34    18   76\n35    18   84\n36    19   36\n37    19   46\n38    19   68\n39    20   32\n40    20   48\n41    20   52\n42    20   56\n43    20   64\n44    22   66\n45    23   54\n46    24   70\n47    24   92\n48    24   93\n49    24  120\n50    25   85\n```\n:::\n:::\n\n\n## 10. Criar coluna dentro do data frame\nÉ utilizado `$` para criar uma nova coluna dentro do data frame, como mostra a seguir:\n\n::: {.cell hash='Aula-2_cache/html/unnamed-chunk-10_2a96e00d43ff4d71e9f2c535ff011a9f'}\n\n```{.r .cell-code}\ndf2$dist2 <- c(1:50)\ndf2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   speed dist dist2\n1      4    2     1\n2      4   10     2\n3      7    4     3\n4      7   22     4\n5      8   16     5\n6      9   10     6\n7     10   18     7\n8     10   26     8\n9     10   34     9\n10    11   17    10\n11    11   28    11\n12    12   14    12\n13    12   20    13\n14    12   24    14\n15    12   28    15\n16    13   26    16\n17    13   34    17\n18    13   34    18\n19    13   46    19\n20    14   26    20\n21    14   36    21\n22    14   60    22\n23    14   80    23\n24    15   20    24\n25    15   26    25\n26    15   54    26\n27    16   32    27\n28    16   40    28\n29    17   32    29\n30    17   40    30\n31    17   50    31\n32    18   42    32\n33    18   56    33\n34    18   76    34\n35    18   84    35\n36    19   36    36\n37    19   46    37\n38    19   68    38\n39    20   32    39\n40    20   48    40\n41    20   52    41\n42    20   56    42\n43    20   64    43\n44    22   66    44\n45    23   54    45\n46    24   70    46\n47    24   92    47\n48    24   93    48\n49    24  120    49\n50    25   85    50\n```\n:::\n:::\n\n::: {.cell hash='Aula-2_cache/html/unnamed-chunk-11_a2a2a92901bdf3784d616456828ae126'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\ndf2 |>\n  mutate(dist3 = dist2+1) |> \n  select(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   speed\n1      4\n2      4\n3      7\n4      7\n5      8\n6      9\n7     10\n8     10\n9     10\n10    11\n11    11\n12    12\n13    12\n14    12\n15    12\n16    13\n17    13\n18    13\n19    13\n20    14\n21    14\n22    14\n23    14\n24    15\n25    15\n26    15\n27    16\n28    16\n29    17\n30    17\n31    17\n32    18\n33    18\n34    18\n35    18\n36    19\n37    19\n38    19\n39    20\n40    20\n41    20\n42    20\n43    20\n44    22\n45    23\n46    24\n47    24\n48    24\n49    24\n50    25\n```\n:::\n:::\n\n\n## 11. Criar arquivo HTML\nPara transformar o documento `.qmd` em `HTML` ou em outros formatos, é necessário renderizar o documento. Para isso basta clicar no menu superior em Render para que o documento ou site seja criado. \n\n::: {.cell hash='Aula-2_cache/html/unnamed-chunk-12_dbef28aff792ca5480d8bf8dd00f8d88'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 7\n  format width height colorspace matte filesize density\n  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  \n1 PNG     1366    768 sRGB       FALSE    89045 38x38  \n```\n:::\n\n::: {.cell-output-display}\n![](Aula-2_files/figure-html/unnamed-chunk-12-1.png){width=683}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}