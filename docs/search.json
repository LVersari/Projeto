[
  {
    "objectID": "projeto_final (1).html",
    "href": "projeto_final (1).html",
    "title": "Projeto Final da Disciplina de Análise e Visualização de Dados em Fitopatologia - FIP606",
    "section": "",
    "text": "O dataset consiste em…………………….. ENROLAR……\n\nlibrary(rnaturalearthhires)\nlibrary(rnaturalearth)\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(ggiraph)\n\n# Função para converter graus, minutos e segundos para graus decimais\ndms_to_decimal &lt;- function(dms, direction) {\n  dms_split &lt;- str_split(dms, \"[°′”’\\\"]\")[[1]]\n  degrees &lt;- as.numeric(dms_split[1])\n  minutes &lt;- as.numeric(dms_split[2])\n  seconds &lt;- as.numeric(dms_split[3])\n  decimal &lt;- degrees + minutes / 60 + seconds / 3600\n  if (direction %in% c(\"S\", \"W\")) {\n    decimal &lt;- -decimal\n  }\n  return(decimal)\n}\n\n# Dados das fazendas\nfazendas &lt;- data.frame(\n  nome = c(\"1, 2 e 3 - Águas de Março\", \"4 - Harmonia\", \"5 - Camila\", \"6 - Tamara/Juliano\", \"7 - Sinai\", \n           \"8 - Chapadão\", \"9 - Geuzilene\"),\n  cidade = c(\"Sapezal - MT\", \"Sapezal - MT\", \"Sapezal - MT\", \"Diamantino - MT\", \"Santa Terezinha - MT\", \"Matupá-MT\", \"Querência - MT\"),\n  lat = c(\"13°03’59”S\", \"13°49’24”S\", \"13°32’23”S\", \"14°10’49”S\", \"10°17”20”S\", \n          \"10°7’27,6”S\", \"12°20’27”S\"),\n  lon = c(\"58°38’14”W\", \"58°45’35”W\", \"58°42’47”W\", \"56°32’46”W\", \"50°47’53”W\", \"54°58’33”W\", \"52°22’45”W\")\n)\n\n# Converter coordenadas para graus decimais\nfazendas &lt;- fazendas %&gt;%\n  mutate(lat_decimal = mapply(dms_to_decimal, str_replace_all(lat, \"[^0-9°′”’\\\"]\", \"\"), ifelse(grepl(\"S\", lat), \"S\", \"N\")),\n         lon_decimal = mapply(dms_to_decimal, str_replace_all(lon, \"[^0-9°′”’\\\"]\", \"\"), ifelse(grepl(\"W\", lon), \"W\", \"E\")))\n\n# Transformando os pontos em um objeto sf\nfazendas_sf &lt;- st_as_sf(fazendas, coords = c(\"lon_decimal\", \"lat_decimal\"), crs = 4326)\n\n# Dados do Brasil\nBRA &lt;- ne_states(country = \"Brazil\", returnclass = \"sf\")\n\n# Plotando o mapa com os pontos e a legenda\ngg &lt;- ggplot(BRA) +\n  geom_sf(fill = \"white\", color = \"black\", size = 0.3) +\n  geom_sf_interactive(data = fazendas_sf, aes(color = nome, tooltip = paste(\"Nome:\", nome, \"&lt;br&gt;Cidade:\", cidade, \"&lt;br&gt;Coordenadas:\", lat, lon)), size = 3) +\n  theme_minimal() +\n  labs(title = \"Mapa de pontos de coleta dos isolados\",\n       color = \"Tratamento/Fazenda\")\n\n# Renderizando o gráfico interativo\ngirafe(ggobj = gg)\n\n\n\n\n\n\n\nPara a leitura e importação de dados em Excel, utilizaremos o pacote readxl, para isso é necessário que instale e carregue este pacote. O pacote readxl, permite a leitura de arquivos Excel (.xlsx) sendo especialmente útil para importar dados que são frequentemente armazenados em planilhas.\n\nlibrary(readxl)\ndados &lt;- read_excel(\"SensibilidadeCory2020.xlsx\")\nhead(dados)\n\n# A tibble: 6 × 7\n  trat   aval isolado  dias   rep  dose  diam\n  &lt;chr&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Fox₢      1       1     2     1     0  23.5\n2 Fox₢      1       1     2     2     0  21.4\n3 Fox₢      1       1     2     3     0  20.0\n4 Fox₢      1       2     2     1     0  25.6\n5 Fox₢      1       2     2     2     0  26.4\n6 Fox₢      1       2     2     3     0  26.3\n\n\n\n\n\n\nlibrary(ggsci)\n\n# Médias\nmedias &lt;- dados |&gt; \n  group_by(trat,dose, aval, isolado) |&gt; \n  summarize(media_diam = mean(diam)) |&gt; \n  ungroup()\n\n\n# Função de gráficos para cada tratamento\nplot_graf &lt;- function(data, tratam) {\n  ggplot(data, aes(x = dose, y = media_diam, color = factor(isolado), group = isolado)) +\n    geom_point()+\n    geom_line()+\n    facet_wrap(~aval)+\n    labs(title = paste(\"Tratamento:\", tratam),\n         x = \"Concentração\",\n         y = \"Diâmetro Micelial Médio (mm)\",\n         color = \"Isolados\")+\n    scale_color_jco()+\n    theme_minimal()+\n    theme(legend.position = \"bottom\" )\n}\n\n# Função para filtrar e plotar os gráficos para cada tratamento\nfor (tratam in unique(medias$trat)) {\n  data &lt;- medias |&gt;\n    filter(trat == tratam)\n  print(plot_graf(data, tratam))\n  dev.flush()\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Médias\nmedias &lt;- dados |&gt; \n  group_by(trat, dose, aval, isolado) |&gt; \n  summarize(media_diam = mean(diam)) |&gt; \n  ungroup()\n\n\n# Função de gráficos para cada tratamento\nplot_graf &lt;- function(data, tratam) {\n  ggplot(data, aes(x = dose, y = media_diam, color = factor(aval), group = aval)) +\n    geom_point()+\n    geom_line()+\n    facet_wrap(~isolado)+\n    labs(title = paste(\"Tratamento:\", tratam),\n         x = \"Concentração\",\n         y = \"Diâmetro Micelial Médio (mm)\",\n         color = \"Avaliação\")+\n    scale_color_jco()+\n    theme_minimal()+\n    theme(legend.position = \"bottom\" )\n}\n\n# Função para filtrar e plotar os gráficos para cada tratamento\nfor (tratam in unique(medias$trat)) {\n  data &lt;- medias |&gt;\n    filter(trat == tratam)\n  print(plot_graf(data, tratam))\n  dev.flush()\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmedias &lt;- dados |&gt; \n  group_by(trat, dose, aval, isolado) |&gt; \n  summarize(media_diam = mean(diam)) |&gt; \n  ungroup()\n\n\n# Função de gráficos para cada tratamento\nplot_graf &lt;- function(data, tratam) {\n  ggplot(data, aes(x = aval, y = media_diam, color = factor(dose), group = dose)) +\n    geom_point()+\n    geom_line()+\n    facet_wrap(~isolado)+\n    labs(title = paste(\"Tratamento:\", tratam),\n         x = \"Avaliações\",\n         y = \"Diâmetro Micelial Médio (mm)\",\n         color = \"Dose\")+\n    scale_color_jco()+\n    theme_minimal()+\n    theme(legend.position = \"bottom\" )\n}\n\n# Função para filtrar e plotar os gráficos para cada tratamento\nfor (tratam in unique(medias$trat)) {\n  data &lt;- medias |&gt;\n    filter(trat == tratam)\n  print(plot_graf(data, tratam))\n  dev.flush()\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMODELOS DE REGRESSÃO - USANDO DIAM\n\nlibrary(dplyr)\nlibrary(drc)\nlibrary(ggplot2)\n\n# Função para ajustar múltiplos modelos de dose-resposta e selecionar o melhor modelo\najustar_e_selecionar_melhor_modelo &lt;- function(dados, tratamento, isolado, avaliacao) {\n  data_filtrado &lt;- dados %&gt;%\n    filter(trat == tratamento, isolado == isolado, aval == avaliacao) %&gt;%\n    group_by(dose) %&gt;%\n    slice_head(n = 3) %&gt;%\n    ungroup()\n  \n  # Ajustar os modelos\n  modelo1 &lt;- tryCatch(drm(diam ~ dose, data = data_filtrado, fct = LN.3()), error = function(e) NULL)\n  modelo2 &lt;- tryCatch(drm(diam ~ dose, data = data_filtrado, fct = LL.3()), error = function(e) NULL)\n  modelo3 &lt;- tryCatch(drm(diam ~ dose, data = data_filtrado, fct = W1.3()), error = function(e) NULL)\n  modelo4 &lt;- tryCatch(drm(diam ~ dose, data = data_filtrado, fct = W2.3()), error = function(e) NULL)\n  \n  # Selecionar o melhor modelo com base no AIC\n  modelos &lt;- list(LN.3 = modelo1, LL.3 = modelo2, W1.3 = modelo3, W2.3 = modelo4)\n  modelos_validos &lt;- modelos[!sapply(modelos, is.null)]\n  \n  if (length(modelos_validos) &gt; 0) {\n    aic_values &lt;- sapply(modelos_validos, AIC, simplify = TRUE)\n    melhor_modelo &lt;- names(aic_values)[which.min(aic_values)]\n    return(list(modelo = modelos_validos[[melhor_modelo]], tipo = melhor_modelo, AIC = aic_values[melhor_modelo]))\n  } else {\n    return(NULL)\n  }\n}\n\n# Lista para armazenar os melhores modelos\nmelhores_modelos &lt;- list()\n\n# Lista de tratamentos, isolados e avaliações únicos\ntratamentos &lt;- unique(dados$trat)\nisolados &lt;- unique(dados$isolado)\navaliacoes &lt;- unique(dados$aval)\n\n# Iterar sobre todas as combinações de tratamento, isolado e avaliação\nfor (tratamento in tratamentos) {\n  for (isolado in isolados) {\n    for (avaliacao in avaliacoes) {\n      # Ajustar e selecionar o melhor modelo para a combinação atual\n      melhor_modelo &lt;- ajustar_e_selecionar_melhor_modelo(dados, tratamento, isolado, avaliacao)\n      chave &lt;- paste(tratamento, isolado, avaliacao, sep = \"-\")\n      melhores_modelos[[chave]] &lt;- melhor_modelo\n    }\n  }\n}\n\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\n\n# Função para plotar os dados e o melhor modelo\nplotar_melhor_modelo &lt;- function(dados, melhor_modelo, tratamento, isolado, avaliacao) {\n  data_filtrado &lt;- dados %&gt;%\n    filter(trat == tratamento, isolado == isolado, aval == avaliacao) %&gt;%\n    group_by(dose) %&gt;%\n    slice_head(n = 3) %&gt;%\n    ungroup()\n  \n  if (!is.null(melhor_modelo$modelo)) {\n    ggplot(data_filtrado, aes(x = dose, y = diam)) +\n      geom_point() +\n      geom_line(aes(y = predict(melhor_modelo$modelo)), color = 'blue') +\n      labs(title = paste(\"Tratamento:\", tratamento, \"Isolado:\", isolado, \"Avaliação:\", avaliacao),\n           subtitle = paste(\"Melhor modelo:\", melhor_modelo$tipo, \"AIC:\", round(melhor_modelo$AIC, 2)),\n           x = \"Dose\",\n           y = \"Diâmetro\") +\n      theme_minimal()\n  } else {\n    ggplot(data_filtrado, aes(x = dose, y = diam)) +\n      geom_point() +\n      labs(title = paste(\"Tratamento:\", tratamento, \"Isolado:\", isolado, \"Avaliação:\", avaliacao),\n           subtitle = \"Nenhum modelo ajustado\",\n           x = \"Dose\",\n           y = \"Diâmetro\") +\n      theme_minimal()\n  }\n}\n\n# Plotar os gráficos para cada combinação\nfor (chave in names(melhores_modelos)) {\n  comb &lt;- unlist(strsplit(chave, \"-\"))\n  tratamento &lt;- comb[1]\n  isolado &lt;- as.numeric(comb[2])\n  avaliacao &lt;- as.numeric(comb[3])\n  melhor_modelo &lt;- melhores_modelos[[chave]]\n  \n  print(plotar_melhor_modelo(dados, melhor_modelo, tratamento, isolado, avaliacao))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlibrary(ec50estimator)\ndf_ec50_LN &lt;- estimate_EC50(diam ~ dose,\n                         data = dados,\n                         isolate_col = \"isolado\",\n                         strata_col = c(\"trat\", \"aval\"),\n                         interval = \"delta\",\n                         fct = drc::LN.3())\n\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  valor inicial em 'vmmin' não é finito\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [1]\n\ndf_ec50_LL &lt;- estimate_EC50(diam ~ dose,\n                         data = dados,\n                         isolate_col = \"isolado\",\n                         strata_col = c(\"trat\", \"aval\"),\n                         interval = \"delta\",\n                         fct = drc::LL.3())\n\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  valor não finito fornecido por optim\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [1]\n\ndf_ec50_W1 &lt;- estimate_EC50(diam ~ dose,\n                         data = dados,\n                         isolate_col = \"isolado\",\n                         strata_col = c(\"trat\", \"aval\"),\n                         interval = \"delta\",\n                         fct = drc::W1.3())\n\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  valor inicial em 'vmmin' não é finito\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\n\ndf_ec50_W2 &lt;- estimate_EC50(diam ~ dose,\n                         data = dados,\n                         isolate_col = \"isolado\",\n                         strata_col = c(\"trat\", \"aval\"),\n                         interval = \"delta\",\n                         fct = drc::W2.3())\n\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [1]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [1]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  valor não finito fornecido por optim\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [1]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\n\nhead(df_ec50_LL)\n\n  ID trat aval    Estimate Std..Error      Lower     Upper\n1  1 Fox₢    1  93.4421518  28.332135  34.522252 152.36205\n2  2 Fox₢    1   0.4936527   4.651691  -9.180068  10.16737\n3  3 Fox₢    1  72.3221270  10.466677  50.555481  94.08877\n4  4 Fox₢    1 163.1277021  39.214661  81.576351 244.67905\n5  5 Fox₢    1   2.8077983  27.435214 -54.246852  59.86245\n6  6 Fox₢    1  11.1168899   6.680551  -2.776077  25.00986\n\n\n\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Função para criar o gráfico de EC50\nplot_ec50 &lt;- function(df_ec50, model_name) {\n  # Filtrar valores não positivos e maiores que 100\n  df_ec50 &lt;- df_ec50 %&gt;% filter(Estimate &gt; 0 & Estimate &lt; 100)\n  \n  # Visualização dos EC50s\n  p &lt;- as.data.frame(df_ec50) %&gt;% \n    mutate(ID = as.numeric(ID)) %&gt;% \n    ggplot(aes(ID, Estimate, color = trat)) +\n    geom_point(size = 2) +\n    geom_errorbar(aes(ymin = Lower, ymax = Upper, color = trat), width = 0) +\n    facet_wrap(~aval, scales = \"free_x\", ncol = 2) +\n    scale_y_log10() +\n    scale_x_continuous(breaks = 1:9) +\n    scale_color_manual(values = c(\"darkred\", \"steelblue\", \"darkgreen\")) +\n    labs(x = \"Isolados\", y = \"EC50\", title = paste(\"Modelo:\", model_name)) +\n    theme_minimal() +\n    coord_flip() +\n    theme(axis.text.y = element_text(angle = 90, vjust = 0.5, hjust = 1), legend.position = \"bottom\")\n  \n  return(p)\n}\n\n# Criar gráficos para cada modelo\nplot_LN &lt;- plot_ec50(df_ec50_LN, \"LN.3\")\nplot_LL &lt;- plot_ec50(df_ec50_LL, \"LL.3\")\nplot_W1 &lt;- plot_ec50(df_ec50_W1, \"W1.3\")\nplot_W2 &lt;- plot_ec50(df_ec50_W2, \"W2.3\")\n\n# Exibir os gráficos\nprint(plot_LN)\n\n\n\n\n\n\n\nprint(plot_LL)\n\n\n\n\n\n\n\nprint(plot_W1)\n\n\n\n\n\n\n\nprint(plot_W2)"
  },
  {
    "objectID": "projeto_final (1).html#carregando-o-dataset",
    "href": "projeto_final (1).html#carregando-o-dataset",
    "title": "Projeto Final da Disciplina de Análise e Visualização de Dados em Fitopatologia - FIP606",
    "section": "",
    "text": "Para a leitura e importação de dados em Excel, utilizaremos o pacote readxl, para isso é necessário que instale e carregue este pacote. O pacote readxl, permite a leitura de arquivos Excel (.xlsx) sendo especialmente útil para importar dados que são frequentemente armazenados em planilhas.\n\nlibrary(readxl)\ndados &lt;- read_excel(\"SensibilidadeCory2020.xlsx\")\nhead(dados)\n\n# A tibble: 6 × 7\n  trat   aval isolado  dias   rep  dose  diam\n  &lt;chr&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Fox₢      1       1     2     1     0  23.5\n2 Fox₢      1       1     2     2     0  21.4\n3 Fox₢      1       1     2     3     0  20.0\n4 Fox₢      1       2     2     1     0  25.6\n5 Fox₢      1       2     2     2     0  26.4\n6 Fox₢      1       2     2     3     0  26.3"
  },
  {
    "objectID": "projeto_final (1).html#visualização-de-dados",
    "href": "projeto_final (1).html#visualização-de-dados",
    "title": "Projeto Final da Disciplina de Análise e Visualização de Dados em Fitopatologia - FIP606",
    "section": "",
    "text": "library(ggsci)\n\n# Médias\nmedias &lt;- dados |&gt; \n  group_by(trat,dose, aval, isolado) |&gt; \n  summarize(media_diam = mean(diam)) |&gt; \n  ungroup()\n\n\n# Função de gráficos para cada tratamento\nplot_graf &lt;- function(data, tratam) {\n  ggplot(data, aes(x = dose, y = media_diam, color = factor(isolado), group = isolado)) +\n    geom_point()+\n    geom_line()+\n    facet_wrap(~aval)+\n    labs(title = paste(\"Tratamento:\", tratam),\n         x = \"Concentração\",\n         y = \"Diâmetro Micelial Médio (mm)\",\n         color = \"Isolados\")+\n    scale_color_jco()+\n    theme_minimal()+\n    theme(legend.position = \"bottom\" )\n}\n\n# Função para filtrar e plotar os gráficos para cada tratamento\nfor (tratam in unique(medias$trat)) {\n  data &lt;- medias |&gt;\n    filter(trat == tratam)\n  print(plot_graf(data, tratam))\n  dev.flush()\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Médias\nmedias &lt;- dados |&gt; \n  group_by(trat, dose, aval, isolado) |&gt; \n  summarize(media_diam = mean(diam)) |&gt; \n  ungroup()\n\n\n# Função de gráficos para cada tratamento\nplot_graf &lt;- function(data, tratam) {\n  ggplot(data, aes(x = dose, y = media_diam, color = factor(aval), group = aval)) +\n    geom_point()+\n    geom_line()+\n    facet_wrap(~isolado)+\n    labs(title = paste(\"Tratamento:\", tratam),\n         x = \"Concentração\",\n         y = \"Diâmetro Micelial Médio (mm)\",\n         color = \"Avaliação\")+\n    scale_color_jco()+\n    theme_minimal()+\n    theme(legend.position = \"bottom\" )\n}\n\n# Função para filtrar e plotar os gráficos para cada tratamento\nfor (tratam in unique(medias$trat)) {\n  data &lt;- medias |&gt;\n    filter(trat == tratam)\n  print(plot_graf(data, tratam))\n  dev.flush()\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmedias &lt;- dados |&gt; \n  group_by(trat, dose, aval, isolado) |&gt; \n  summarize(media_diam = mean(diam)) |&gt; \n  ungroup()\n\n\n# Função de gráficos para cada tratamento\nplot_graf &lt;- function(data, tratam) {\n  ggplot(data, aes(x = aval, y = media_diam, color = factor(dose), group = dose)) +\n    geom_point()+\n    geom_line()+\n    facet_wrap(~isolado)+\n    labs(title = paste(\"Tratamento:\", tratam),\n         x = \"Avaliações\",\n         y = \"Diâmetro Micelial Médio (mm)\",\n         color = \"Dose\")+\n    scale_color_jco()+\n    theme_minimal()+\n    theme(legend.position = \"bottom\" )\n}\n\n# Função para filtrar e plotar os gráficos para cada tratamento\nfor (tratam in unique(medias$trat)) {\n  data &lt;- medias |&gt;\n    filter(trat == tratam)\n  print(plot_graf(data, tratam))\n  dev.flush()\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMODELOS DE REGRESSÃO - USANDO DIAM\n\nlibrary(dplyr)\nlibrary(drc)\nlibrary(ggplot2)\n\n# Função para ajustar múltiplos modelos de dose-resposta e selecionar o melhor modelo\najustar_e_selecionar_melhor_modelo &lt;- function(dados, tratamento, isolado, avaliacao) {\n  data_filtrado &lt;- dados %&gt;%\n    filter(trat == tratamento, isolado == isolado, aval == avaliacao) %&gt;%\n    group_by(dose) %&gt;%\n    slice_head(n = 3) %&gt;%\n    ungroup()\n  \n  # Ajustar os modelos\n  modelo1 &lt;- tryCatch(drm(diam ~ dose, data = data_filtrado, fct = LN.3()), error = function(e) NULL)\n  modelo2 &lt;- tryCatch(drm(diam ~ dose, data = data_filtrado, fct = LL.3()), error = function(e) NULL)\n  modelo3 &lt;- tryCatch(drm(diam ~ dose, data = data_filtrado, fct = W1.3()), error = function(e) NULL)\n  modelo4 &lt;- tryCatch(drm(diam ~ dose, data = data_filtrado, fct = W2.3()), error = function(e) NULL)\n  \n  # Selecionar o melhor modelo com base no AIC\n  modelos &lt;- list(LN.3 = modelo1, LL.3 = modelo2, W1.3 = modelo3, W2.3 = modelo4)\n  modelos_validos &lt;- modelos[!sapply(modelos, is.null)]\n  \n  if (length(modelos_validos) &gt; 0) {\n    aic_values &lt;- sapply(modelos_validos, AIC, simplify = TRUE)\n    melhor_modelo &lt;- names(aic_values)[which.min(aic_values)]\n    return(list(modelo = modelos_validos[[melhor_modelo]], tipo = melhor_modelo, AIC = aic_values[melhor_modelo]))\n  } else {\n    return(NULL)\n  }\n}\n\n# Lista para armazenar os melhores modelos\nmelhores_modelos &lt;- list()\n\n# Lista de tratamentos, isolados e avaliações únicos\ntratamentos &lt;- unique(dados$trat)\nisolados &lt;- unique(dados$isolado)\navaliacoes &lt;- unique(dados$aval)\n\n# Iterar sobre todas as combinações de tratamento, isolado e avaliação\nfor (tratamento in tratamentos) {\n  for (isolado in isolados) {\n    for (avaliacao in avaliacoes) {\n      # Ajustar e selecionar o melhor modelo para a combinação atual\n      melhor_modelo &lt;- ajustar_e_selecionar_melhor_modelo(dados, tratamento, isolado, avaliacao)\n      chave &lt;- paste(tratamento, isolado, avaliacao, sep = \"-\")\n      melhores_modelos[[chave]] &lt;- melhor_modelo\n    }\n  }\n}\n\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\n\n# Função para plotar os dados e o melhor modelo\nplotar_melhor_modelo &lt;- function(dados, melhor_modelo, tratamento, isolado, avaliacao) {\n  data_filtrado &lt;- dados %&gt;%\n    filter(trat == tratamento, isolado == isolado, aval == avaliacao) %&gt;%\n    group_by(dose) %&gt;%\n    slice_head(n = 3) %&gt;%\n    ungroup()\n  \n  if (!is.null(melhor_modelo$modelo)) {\n    ggplot(data_filtrado, aes(x = dose, y = diam)) +\n      geom_point() +\n      geom_line(aes(y = predict(melhor_modelo$modelo)), color = 'blue') +\n      labs(title = paste(\"Tratamento:\", tratamento, \"Isolado:\", isolado, \"Avaliação:\", avaliacao),\n           subtitle = paste(\"Melhor modelo:\", melhor_modelo$tipo, \"AIC:\", round(melhor_modelo$AIC, 2)),\n           x = \"Dose\",\n           y = \"Diâmetro\") +\n      theme_minimal()\n  } else {\n    ggplot(data_filtrado, aes(x = dose, y = diam)) +\n      geom_point() +\n      labs(title = paste(\"Tratamento:\", tratamento, \"Isolado:\", isolado, \"Avaliação:\", avaliacao),\n           subtitle = \"Nenhum modelo ajustado\",\n           x = \"Dose\",\n           y = \"Diâmetro\") +\n      theme_minimal()\n  }\n}\n\n# Plotar os gráficos para cada combinação\nfor (chave in names(melhores_modelos)) {\n  comb &lt;- unlist(strsplit(chave, \"-\"))\n  tratamento &lt;- comb[1]\n  isolado &lt;- as.numeric(comb[2])\n  avaliacao &lt;- as.numeric(comb[3])\n  melhor_modelo &lt;- melhores_modelos[[chave]]\n  \n  print(plotar_melhor_modelo(dados, melhor_modelo, tratamento, isolado, avaliacao))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlibrary(ec50estimator)\ndf_ec50_LN &lt;- estimate_EC50(diam ~ dose,\n                         data = dados,\n                         isolate_col = \"isolado\",\n                         strata_col = c(\"trat\", \"aval\"),\n                         interval = \"delta\",\n                         fct = drc::LN.3())\n\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  valor inicial em 'vmmin' não é finito\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [1]\n\ndf_ec50_LL &lt;- estimate_EC50(diam ~ dose,\n                         data = dados,\n                         isolate_col = \"isolado\",\n                         strata_col = c(\"trat\", \"aval\"),\n                         interval = \"delta\",\n                         fct = drc::LL.3())\n\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  valor não finito fornecido por optim\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [1]\n\ndf_ec50_W1 &lt;- estimate_EC50(diam ~ dose,\n                         data = dados,\n                         isolate_col = \"isolado\",\n                         strata_col = c(\"trat\", \"aval\"),\n                         interval = \"delta\",\n                         fct = drc::W1.3())\n\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  valor inicial em 'vmmin' não é finito\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\n\ndf_ec50_W2 &lt;- estimate_EC50(diam ~ dose,\n                         data = dados,\n                         isolate_col = \"isolado\",\n                         strata_col = c(\"trat\", \"aval\"),\n                         interval = \"delta\",\n                         fct = drc::W2.3())\n\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [1]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [1]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  valor não finito fornecido por optim\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [1]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\n\nhead(df_ec50_LL)\n\n  ID trat aval    Estimate Std..Error      Lower     Upper\n1  1 Fox₢    1  93.4421518  28.332135  34.522252 152.36205\n2  2 Fox₢    1   0.4936527   4.651691  -9.180068  10.16737\n3  3 Fox₢    1  72.3221270  10.466677  50.555481  94.08877\n4  4 Fox₢    1 163.1277021  39.214661  81.576351 244.67905\n5  5 Fox₢    1   2.8077983  27.435214 -54.246852  59.86245\n6  6 Fox₢    1  11.1168899   6.680551  -2.776077  25.00986\n\n\n\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Função para criar o gráfico de EC50\nplot_ec50 &lt;- function(df_ec50, model_name) {\n  # Filtrar valores não positivos e maiores que 100\n  df_ec50 &lt;- df_ec50 %&gt;% filter(Estimate &gt; 0 & Estimate &lt; 100)\n  \n  # Visualização dos EC50s\n  p &lt;- as.data.frame(df_ec50) %&gt;% \n    mutate(ID = as.numeric(ID)) %&gt;% \n    ggplot(aes(ID, Estimate, color = trat)) +\n    geom_point(size = 2) +\n    geom_errorbar(aes(ymin = Lower, ymax = Upper, color = trat), width = 0) +\n    facet_wrap(~aval, scales = \"free_x\", ncol = 2) +\n    scale_y_log10() +\n    scale_x_continuous(breaks = 1:9) +\n    scale_color_manual(values = c(\"darkred\", \"steelblue\", \"darkgreen\")) +\n    labs(x = \"Isolados\", y = \"EC50\", title = paste(\"Modelo:\", model_name)) +\n    theme_minimal() +\n    coord_flip() +\n    theme(axis.text.y = element_text(angle = 90, vjust = 0.5, hjust = 1), legend.position = \"bottom\")\n  \n  return(p)\n}\n\n# Criar gráficos para cada modelo\nplot_LN &lt;- plot_ec50(df_ec50_LN, \"LN.3\")\nplot_LL &lt;- plot_ec50(df_ec50_LL, \"LL.3\")\nplot_W1 &lt;- plot_ec50(df_ec50_W1, \"W1.3\")\nplot_W2 &lt;- plot_ec50(df_ec50_W2, \"W2.3\")\n\n# Exibir os gráficos\nprint(plot_LN)\n\n\n\n\n\n\n\nprint(plot_LL)\n\n\n\n\n\n\n\nprint(plot_W1)\n\n\n\n\n\n\n\nprint(plot_W2)"
  },
  {
    "objectID": "paginicial.html",
    "href": "paginicial.html",
    "title": "Projeto",
    "section": "",
    "text": "options(\"install.lock\"=FALSE)\nlibrary(conflicted)\nconflict_prefer(\"filter\", \"dplyr\")\nconflict_prefer(\"lag\", \"dplyr\")\n\n1. Carregando pacotes\nPara as análises e visualização de dados utilizou os seguintes pacotes, com o carregamento usando a função library(nome do pacote):\n\nlibrary(rnaturalearthhires)\n\nlibrary(rnaturalearth)\n\nlibrary(tidyverse)\n\nlibrary(sf)\n\nlibrary(ggiraph)\n\n2. Plotagem Mapa (origem dos isolados)\nFunção para converter graus, minutos e segundos para graus decimais\n\n# Função para converter graus, minutos e segundos para graus decimais\ndms_to_decimal &lt;- function(dms, direction) {\n  dms_split &lt;- str_split(dms, \"[°′”’\\\"]\")[[1]]\n  degrees &lt;- as.numeric(dms_split[1])\n  minutes &lt;- as.numeric(dms_split[2])\n  seconds &lt;- as.numeric(dms_split[3])\n  decimal &lt;- degrees + minutes / 60 + seconds / 3600\n  if (direction %in% c(\"S\", \"W\")) {\n    decimal &lt;- -decimal\n  }\n  return(decimal)\n}\n\n# Dados das fazendas\nfazendas &lt;- data.frame(\n  nome = c(\"1, 2 e 3 - Faz. Águas de Março\", \"4 - Faz. Harmonia\", \"5 - Camila\", \"6 - Tamara/Juliano\", \"7 - Faz. Sinai\", \n           \"8 - Faz. Chapadão\", \"9 - Geuzilene\"),\n  cidade = c(\"Sapezal - MT\", \"Sapezal - MT\", \"Sapezal - MT\", \"Diamantino - MT\", \"Santa Terezinha - MT\", \"Matupá-MT\", \"Querência - MT\"),\n  lat = c(\"13°03’59”S\", \"13°49’24”S\", \"13°32’23”S\", \"14°10’49”S\", \"10°17”20”S\", \n          \"10°7’27,6”S\", \"12°20’27”S\"),\n  lon = c(\"58°38’14”W\", \"58°45’35”W\", \"58°42’47”W\", \"56°32’46”W\", \"50°47’53”W\", \"54°58’33”W\", \"52°22’45”W\")\n)\n\n# Converter coordenadas para graus decimais\nfazendas &lt;- fazendas %&gt;%\n  mutate(lat_decimal = mapply(dms_to_decimal, str_replace_all(lat, \"[^0-9°′”’\\\"]\", \"\"), ifelse(grepl(\"S\", lat), \"S\", \"N\")),\n         lon_decimal = mapply(dms_to_decimal, str_replace_all(lon, \"[^0-9°′”’\\\"]\", \"\"), ifelse(grepl(\"W\", lon), \"W\", \"E\")))\n\n# Transformando os pontos em um objeto sf\nfazendas_sf &lt;- st_as_sf(fazendas, coords = c(\"lon_decimal\", \"lat_decimal\"), crs = 4326)\n\n# Dados do Brasil\nBRA &lt;- ne_states(country = \"Brazil\", returnclass = \"sf\")\n\n# Plotando o mapa com os pontos e a legenda\ngg &lt;- ggplot(BRA) +\n  geom_sf(fill = \"white\", color = \"black\", size = 0.3) +\n  geom_sf_interactive(data = fazendas_sf, aes(color = nome, tooltip = paste(\"Nome:\", nome, \"&lt;br&gt;Cidade:\", cidade, \"&lt;br&gt;Coordenadas:\", lat, lon)), size = 3) +\n  theme_minimal() +\n  labs(title = \"Mapa de pontos de coleta dos isolados\",\n       color = \"Tratamento/Fazenda\")\n\n# Renderizando o gráfico interativo\ngirafe(ggobj = gg)\n\n\n\n\n\n3. Carregando o Dataset\nPara a leitura e importação de dados em Excel, utilizaremos o pacote `readxl`, para isso é necessário que instale e carregue este pacote. O pacote `readxl`, permite a leitura de arquivos Excel (.xlsx) sendo especialmente útil para importar dados que são frequentemente armazenados em planilhas.\n\nlibrary(readxl)\ndados &lt;- read_excel(\"SensibilidadeCory2020.xlsx\")\nhead(dados)\n\n# A tibble: 6 × 7\n  trat   aval isolado  dias   rep  dose  diam\n  &lt;chr&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Fox₢      1       1     2     1     0  23.5\n2 Fox₢      1       1     2     2     0  21.4\n3 Fox₢      1       1     2     3     0  20.0\n4 Fox₢      1       2     2     1     0  25.6\n5 Fox₢      1       2     2     2     0  26.4\n6 Fox₢      1       2     2     3     0  26.3\n\n\n4. Visualização de dados\nPara a visualização do conjunto de dados primeiramente foi calculadas as médias de diâmetro médio da colônia de cada isolado, em cada fungicida, dose e avaliação.\nUtilizou a função ggplot() do pacote tidyverse e diferentes formatos gráficos. A variável resposta crescimento micelial (mm) foi visualizada por fungicida, em cada nível dos fatores: Isolados, Avaliações e Doses.\nGráfico de pontos: Esse tipo de gráfico é interessante para visualização da dispersão dos dados, onde cada ponto representa uma observação. Foi utilizado esse tipo de gráfico no trabalho devido o número de repetições (3) ser relativamente pequeno, facilitando a visualização. Utilizou a função geom_point() para plotar o gráfico.\nGráfico de linhas: Utilizou a função geom_line() do pacote ggplot2 para criar um gráfico de linhas. Esse tipo de gráfico é usado para visualizar tendências ou padrões ao longo de uma variável contínua, como, tempo, temperatura, doses.\nO gráfico de linhas aqui foi utilizado para ligar os pontos, mostrando o comportamento do crescimento micelial (mm) em em relação as variáveis contínuas: doses e avaliações no tempo.\nfacet_wrap(): foi usado para criar uma grade gráfica, onde cada subgráfico representa um subconjunto dos dados.\nPara melhor visualização das variáveis respostas, utilizamos a “Dose” como um fator e adicionamos facetas com a função facet_wrap() para vizualizarmos os tratamentos separadamente.\n4.1 Crescimento micelial x Doses (Isolados)\n\nlibrary(ggsci)\n\n# Médias\nmedias &lt;- dados |&gt; \n  group_by(trat,dose, aval, isolado) |&gt; \n  summarize(media_diam = mean(diam, na.rm = TRUE), .groups = 'drop') |&gt; \n  ungroup()\n\n\n# Função de gráficos para cada tratamento\nplot_graf &lt;- function(data, tratam) {\n  ggplot(data, aes(x = dose, y = media_diam, color = factor(isolado), group = isolado)) +\n    geom_point()+\n    geom_line()+\n    facet_wrap(~aval)+\n    labs(title = paste(\"Tratamento:\", tratam),\n         x = \"Concentração\",\n         y = \"Diâmetro Micelial Médio (mm)\",\n         color = \"Isolados\")+\n    scale_color_jco()+\n    theme_minimal()+\n    theme(legend.position = \"bottom\" )\n}\n\n# Função para filtrar e plotar os gráficos para cada tratamento\nfor (tratam in unique(medias$trat)) {\n  data &lt;- medias |&gt;\n    filter(trat == tratam)\n  print(plot_graf(data, tratam))\n  dev.flush()\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.2 Crescimento micelial x Doses (Avaliações)\n\n# Médias\nmedias &lt;- dados |&gt; \n  group_by(trat, dose, aval, isolado) |&gt; \n  summarize(media_diam = mean(diam, na.rm = TRUE), .groups = 'drop') |&gt; \n  ungroup()\n\n\n# Função de gráficos para cada tratamento\nplot_graf &lt;- function(data, tratam) {\n  ggplot(data, aes(x = dose, y = media_diam, color = factor(aval), group = aval)) +\n    geom_point()+\n    geom_line()+\n    facet_wrap(~isolado)+\n    labs(title = paste(\"Tratamento:\", tratam),\n         x = \"Concentração\",\n         y = \"Diâmetro Micelial Médio (mm)\",\n         color = \"Avaliação\")+\n    scale_color_jco()+\n    theme_minimal()+\n    theme(legend.position = \"bottom\" )\n}\n\n# Função para filtrar e plotar os gráficos para cada tratamento\nfor (tratam in unique(medias$trat)) {\n  data &lt;- medias |&gt;\n    filter(trat == tratam)\n  print(plot_graf(data, tratam))\n  dev.flush()\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.3 Crescimento micelial x Avaliações (Doses)\n\nmedias &lt;- dados |&gt; \n  group_by(trat, dose, aval, isolado) |&gt; \n  summarize(media_diam = mean(diam, na.rm = TRUE), .groups = 'drop') |&gt; \n  ungroup()\n\n\n# Função de gráficos para cada tratamento\nplot_graf &lt;- function(data, tratam) {\n  ggplot(data, aes(x = aval, y = media_diam, color = factor(dose), group = dose)) +\n    geom_point()+\n    geom_line()+\n    facet_wrap(~isolado)+\n    labs(title = paste(\"Tratamento:\", tratam),\n         x = \"Avaliações\",\n         y = \"Diâmetro Micelial Médio (mm)\",\n         color = \"Dose\")+\n    scale_color_jco()+\n    theme_minimal()+\n    theme(legend.position = \"bottom\" )\n}\n\n# Função para filtrar e plotar os gráficos para cada tratamento\nfor (tratam in unique(medias$trat)) {\n  data &lt;- medias |&gt;\n    filter(trat == tratam)\n  print(plot_graf(data, tratam))\n  dev.flush()\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMODELOS DE REGRESSÃO - USANDO DIAM\n\nlibrary(dplyr)\nlibrary(drc)\nlibrary(ggplot2)\n\n# Função para ajustar múltiplos modelos de dose-resposta e selecionar o melhor modelo\najustar_e_selecionar_melhor_modelo &lt;- function(dados, tratamento, isolado, avaliacao) {\n  data_filtrado &lt;- dados %&gt;%\n    filter(trat == tratamento, isolado == isolado, aval == avaliacao) %&gt;%\n    group_by(dose) %&gt;%\n    slice_head(n = 3) %&gt;%\n    ungroup()\n  \n  # Ajustar os modelos\n  modelo1 &lt;- tryCatch(drm(diam ~ dose, data = data_filtrado, fct = LN.3()), error = function(e) NULL)\n  modelo2 &lt;- tryCatch(drm(diam ~ dose, data = data_filtrado, fct = LL.3()), error = function(e) NULL)\n  modelo3 &lt;- tryCatch(drm(diam ~ dose, data = data_filtrado, fct = W1.3()), error = function(e) NULL)\n  modelo4 &lt;- tryCatch(drm(diam ~ dose, data = data_filtrado, fct = W2.3()), error = function(e) NULL)\n  \n  # Selecionar o melhor modelo com base no AIC\n  modelos &lt;- list(LN.3 = modelo1, LL.3 = modelo2, W1.3 = modelo3, W2.3 = modelo4)\n  modelos_validos &lt;- modelos[!sapply(modelos, is.null)]\n  \n  if (length(modelos_validos) &gt; 0) {\n    aic_values &lt;- sapply(modelos_validos, AIC, simplify = TRUE)\n    melhor_modelo &lt;- names(aic_values)[which.min(aic_values)]\n    return(list(modelo = modelos_validos[[melhor_modelo]], tipo = melhor_modelo, AIC = aic_values[melhor_modelo]))\n  } else {\n    return(NULL)\n  }\n}\n\n# Lista para armazenar os melhores modelos\nmelhores_modelos &lt;- list()\n\n# Lista de tratamentos, isolados e avaliações únicos\ntratamentos &lt;- unique(dados$trat)\nisolados &lt;- unique(dados$isolado)\navaliacoes &lt;- unique(dados$aval)\n\n# Iterar sobre todas as combinações de tratamento, isolado e avaliação\nfor (tratamento in tratamentos) {\n  for (isolado in isolados) {\n    for (avaliacao in avaliacoes) {\n      # Ajustar e selecionar o melhor modelo para a combinação atual\n      melhor_modelo &lt;- ajustar_e_selecionar_melhor_modelo(dados, tratamento, isolado, avaliacao)\n      chave &lt;- paste(tratamento, isolado, avaliacao, sep = \"-\")\n      melhores_modelos[[chave]] &lt;- melhor_modelo\n    }\n  }\n}\n\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\n\n# Função para plotar os dados e o melhor modelo\nplotar_melhor_modelo &lt;- function(dados, melhor_modelo, tratamento, isolado, avaliacao) {\n  data_filtrado &lt;- dados %&gt;%\n    filter(trat == tratamento, isolado == isolado, aval == avaliacao) %&gt;%\n    group_by(dose) %&gt;%\n    slice_head(n = 3) %&gt;%\n    ungroup()\n  \n  if (!is.null(melhor_modelo$modelo)) {\n    ggplot(data_filtrado, aes(x = dose, y = diam)) +\n      geom_point() +\n      geom_line(aes(y = predict(melhor_modelo$modelo)), color = 'blue') +\n      labs(title = paste(\"Tratamento:\", tratamento, \"Isolado:\", isolado, \"Avaliação:\", avaliacao),\n           subtitle = paste(\"Melhor modelo:\", melhor_modelo$tipo, \"AIC:\", round(melhor_modelo$AIC, 2)),\n           x = \"Dose\",\n           y = \"Diâmetro\") +\n      theme_minimal()\n  } else {\n    ggplot(data_filtrado, aes(x = dose, y = diam)) +\n      geom_point() +\n      labs(title = paste(\"Tratamento:\", tratamento, \"Isolado:\", isolado, \"Avaliação:\", avaliacao),\n           subtitle = \"Nenhum modelo ajustado\",\n           x = \"Dose\",\n           y = \"Diâmetro\") +\n      theme_minimal()\n  }\n}\n\n# Plotar os gráficos para cada combinação\nfor (chave in names(melhores_modelos)) {\n  comb &lt;- unlist(strsplit(chave, \"-\"))\n  tratamento &lt;- comb[1]\n  isolado &lt;- as.numeric(comb[2])\n  avaliacao &lt;- as.numeric(comb[3])\n  melhor_modelo &lt;- melhores_modelos[[chave]]\n  \n  print(plotar_melhor_modelo(dados, melhor_modelo, tratamento, isolado, avaliacao))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlibrary(ec50estimator)\ndf_ec50_LN &lt;- estimate_EC50(diam ~ dose,\n                         data = dados,\n                         isolate_col = \"isolado\",\n                         strata_col = c(\"trat\", \"aval\"),\n                         interval = \"delta\",\n                         fct = drc::LN.3())\n\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  valor inicial em 'vmmin' não é finito\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [1]\n\ndf_ec50_LL &lt;- estimate_EC50(diam ~ dose,\n                         data = dados,\n                         isolate_col = \"isolado\",\n                         strata_col = c(\"trat\", \"aval\"),\n                         interval = \"delta\",\n                         fct = drc::LL.3())\n\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  valor não finito fornecido por optim\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [1]\n\ndf_ec50_W1 &lt;- estimate_EC50(diam ~ dose,\n                         data = dados,\n                         isolate_col = \"isolado\",\n                         strata_col = c(\"trat\", \"aval\"),\n                         interval = \"delta\",\n                         fct = drc::W1.3())\n\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  valor inicial em 'vmmin' não é finito\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\n\ndf_ec50_W2 &lt;- estimate_EC50(diam ~ dose,\n                         data = dados,\n                         isolate_col = \"isolado\",\n                         strata_col = c(\"trat\", \"aval\"),\n                         interval = \"delta\",\n                         fct = drc::W2.3())\n\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [1]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [1]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  valor não finito fornecido por optim\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [1]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\n\nhead(df_ec50_LL)\n\n  ID trat aval    Estimate Std..Error      Lower     Upper\n1  1 Fox₢    1  93.4421518  28.332135  34.522252 152.36205\n2  2 Fox₢    1   0.4936527   4.651691  -9.180068  10.16737\n3  3 Fox₢    1  72.3221270  10.466677  50.555481  94.08877\n4  4 Fox₢    1 163.1277021  39.214661  81.576351 244.67905\n5  5 Fox₢    1   2.8077983  27.435214 -54.246852  59.86245\n6  6 Fox₢    1  11.1168899   6.680551  -2.776077  25.00986\n\nlibrary(DT)\ndatatable(df_ec50_W1 ,\n          extensions = 'Buttons',\n          options = list(\n            dom = 'Bfrtip',\n            buttons = c('copy', 'excel')))\n\n\n\n\ndatatable(df_ec50_W2 ,\n          extensions = 'Buttons',\n          options = list(\n            dom = 'Bfrtip',\n            buttons = c('copy', 'excel')))\n\n\n\n\n\n\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Função para criar o gráfico de EC50\nplot_ec50 &lt;- function(df_ec50, model_name) {\n  # Filtrar valores não positivos e maiores que 100\n  df_ec50 &lt;- df_ec50 %&gt;% filter(Estimate &gt; 0 & Estimate &lt; 100)\n  \n  # Visualização dos EC50s\n  p &lt;- as.data.frame(df_ec50) %&gt;% \n    mutate(ID = as.numeric(ID)) %&gt;% \n    ggplot(aes(ID, Estimate, color = trat)) +\n    geom_point(size = 2) +\n    geom_errorbar(aes(ymin = Lower, ymax = Upper, color = trat), width = 0) +\n    facet_wrap(~aval, scales = \"free_x\", ncol = 2) +\n    scale_y_log10() +\n    scale_x_continuous(breaks = 1:9) +\n    scale_color_manual(values = c(\"darkred\", \"steelblue\", \"darkgreen\")) +\n    labs(x = \"Isolados\", y = \"EC50\", title = paste(\"Modelo:\", model_name)) +\n    theme_minimal() +\n    coord_flip() +\n    theme(axis.text.y = element_text(angle = 90, vjust = 0.5, hjust = 1), legend.position = \"bottom\")\n  \n  return(p)\n}\n\n# Criar gráficos para cada modelo\nplot_LN &lt;- plot_ec50(df_ec50_LN, \"LN.3\")\nplot_LL &lt;- plot_ec50(df_ec50_LL, \"LL.3\")\nplot_W1 &lt;- plot_ec50(df_ec50_W1, \"W1.3\")\nplot_W2 &lt;- plot_ec50(df_ec50_W2, \"W2.3\")\n\n# Exibir os gráficos\nprint(plot_LN)\n\n\n\n\n\n\n\nprint(plot_LL)\n\n\n\n\n\n\n\nprint(plot_W1)\n\n\n\n\n\n\n\nprint(plot_W2)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Bem-vindos!",
    "section": "",
    "text": "Nessa página web se encontra o projeto desenvolvido pelos alunos: Gabriel Serafini e Lucas Rodrigues Versari, na Disciplina de Pós-graduação do Departamento de Fitopatologia da Universidade Federal de Viçosa [UFV], FIP606 - Análises Análise e Visualização de Dados em Fitopatologia, ministrada pelo Professor Dr. Emerson Medeiros Del Ponte.\nQualquer dúvida ou sugestão, no menu superior ao lado direito se encontram endereços de e-mail e redes sociais dos criadores dessa página."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Introducao.html",
    "href": "Introducao.html",
    "title": "Projeto",
    "section": "",
    "text": "Sensibilidade in vitro de isolados de Corynespora cassiicola a fungicidas, oriundos de áreas com o cultivo de soja-algodão em sucessão.\nA baixa eficácia do controle químico na redução do progresso da doença Mancha Alvo (Corynespora cassiicola) em cultivos de soja e algodão, tem sido observada em diferentes regiões produtoras do Brasil. A eficiência reduzida dos fungicidas pode ser atribuída a redução ou perda de sensibilidade da população patogênica. Principalmente em regiões com o cultivo de plantas hospedeiras de C. cassiicola, como soja-algodão.\nO objetivo desse trabalho foi determinar a sensibilidade de isolados de C. cassiicola à fungicidas, obtidos a partir de amostras foliares de plantas de soja e algodão, por meio da técnica de inibição do crescimento micelial in vitro.\nDeterminou-se a sensibilidade de dezessete isolados de C. cassiicola, oriundos de diferentes regiões produtoras com o cultivo de soja-algodão em sucessão. Os tratamentos utilizados foram: Fungicida 1 e Fungicida 3, nas concentrações 0,5 mg L-1 ; 1,0 mg L-1 ; 2,5 mg L-1 ; 5,0 mg L-1 ; 10 mg L-1 ; 20 mg L-1 ; 50 mg L-1 e Fungicida 2 nas concentrações 12,5 mg L-1 ; 50 mg L-1 ; 200 mg L-1 ; 250 mg L-1 ; 300 mg L-1 ; 400 mg L-1 ; 450 mg L-1 e a testemunha sem fungicida.\nO delineamento experimental empregado foi o inteiramente casualizado (DIC), com três repetições. De cada isolado foram transferidos discos de 5 mm de diâmetro para placas de Petri com meio BDA + tratamentos e incubados a 28°C. As medições do diâmetro médio da colônia fúngica foram realizadas durante quinze dias, com intervalo de dois a três dias entre cada avaliação. Os dados foram submetidos a análises de regressão não-linear, utilizando os modelos probit, logit, Weibull 1 e Weibull 2, para identificar o modelo que melhor representa a relação entre as concentrações de cada fungicida e os crescimentos miceliais de cada isolado, para determinar a CE50 (concentrações efetivas na redução do diâmetro de colônias do fungo em 50%).\nCom base na CE50 foi determinada a sensibilidade dos isolados aos fungicidas 1 e 3 em: alta sensibilidade, moderada sensibilidade e insensível. Para o fungicida 2 a sensibilidade foi classificada em: sensível e insensível."
  },
  {
    "objectID": "projeto_final (1) - Copia.html",
    "href": "projeto_final (1) - Copia.html",
    "title": "Projeto Final da Disciplina de Análise e Visualização de Dados em Fitopatologia - FIP606",
    "section": "",
    "text": "O dataset consiste em…………………….. ENROLAR……\n\noptions(\"install.lock\"=FALSE)\n\n\nlibrary(rnaturalearthhires)\nlibrary(rnaturalearth)\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(ggiraph)\n\n# Função para converter graus, minutos e segundos para graus decimais\ndms_to_decimal &lt;- function(dms, direction) {\n  dms_split &lt;- str_split(dms, \"[°′”’\\\"]\")[[1]]\n  degrees &lt;- as.numeric(dms_split[1])\n  minutes &lt;- as.numeric(dms_split[2])\n  seconds &lt;- as.numeric(dms_split[3])\n  decimal &lt;- degrees + minutes / 60 + seconds / 3600\n  if (direction %in% c(\"S\", \"W\")) {\n    decimal &lt;- -decimal\n  }\n  return(decimal)\n}\n\n# Dados das fazendas\nfazendas &lt;- data.frame(\n  nome = c(\"1, 2 e 3 - Águas de Março\", \"4 - Harmonia\", \"5 - Camila\", \"6 - Tamara/Juliano\", \"7 - Sinai\", \n           \"8 - Chapadão\", \"9 - Geuzilene\"),\n  cidade = c(\"Sapezal - MT\", \"Sapezal - MT\", \"Sapezal - MT\", \"Diamantino - MT\", \"Santa Terezinha - MT\", \"Matupá-MT\", \"Querência - MT\"),\n  lat = c(\"13°03’59”S\", \"13°49’24”S\", \"13°32’23”S\", \"14°10’49”S\", \"10°17”20”S\", \n          \"10°7’27,6”S\", \"12°20’27”S\"),\n  lon = c(\"58°38’14”W\", \"58°45’35”W\", \"58°42’47”W\", \"56°32’46”W\", \"50°47’53”W\", \"54°58’33”W\", \"52°22’45”W\")\n)\n\n# Converter coordenadas para graus decimais\nfazendas &lt;- fazendas %&gt;%\n  mutate(lat_decimal = mapply(dms_to_decimal, str_replace_all(lat, \"[^0-9°′”’\\\"]\", \"\"), ifelse(grepl(\"S\", lat), \"S\", \"N\")),\n         lon_decimal = mapply(dms_to_decimal, str_replace_all(lon, \"[^0-9°′”’\\\"]\", \"\"), ifelse(grepl(\"W\", lon), \"W\", \"E\")))\n\n# Transformando os pontos em um objeto sf\nfazendas_sf &lt;- st_as_sf(fazendas, coords = c(\"lon_decimal\", \"lat_decimal\"), crs = 4326)\n\n# Dados do Brasil\nBRA &lt;- ne_states(country = \"Brazil\", returnclass = \"sf\")\n\n# Plotando o mapa com os pontos e a legenda\ngg &lt;- ggplot(BRA) +\n  geom_sf(fill = \"white\", color = \"black\", size = 0.3) +\n  geom_sf_interactive(data = fazendas_sf, aes(color = nome, tooltip = paste(\"Nome:\", nome, \"&lt;br&gt;Cidade:\", cidade, \"&lt;br&gt;Coordenadas:\", lat, lon)), size = 3) +\n  theme_minimal() +\n  labs(title = \"Mapa de pontos de coleta dos isolados\",\n       color = \"Tratamento/Fazenda\")\n\n# Renderizando o gráfico interativo\ngirafe(ggobj = gg)\n\n\n\n\n\n\n\nPara a leitura e importação de dados em Excel, utilizaremos o pacote readxl, para isso é necessário que instale e carregue este pacote. O pacote readxl, permite a leitura de arquivos Excel (.xlsx) sendo especialmente útil para importar dados que são frequentemente armazenados em planilhas.\n\nlibrary(readxl)\ndados &lt;- read_excel(\"SensibilidadeCory2020.xlsx\")\nhead(dados)\n\n# A tibble: 6 × 7\n  trat   aval isolado  dias   rep  dose  diam\n  &lt;chr&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Fox₢      1       1     2     1     0  23.5\n2 Fox₢      1       1     2     2     0  21.4\n3 Fox₢      1       1     2     3     0  20.0\n4 Fox₢      1       2     2     1     0  25.6\n5 Fox₢      1       2     2     2     0  26.4\n6 Fox₢      1       2     2     3     0  26.3\n\n\n\n\n\n\nlibrary(ggsci)\n\n# Médias\nmedias &lt;- dados |&gt; \n  group_by(trat,dose, aval, isolado) |&gt; \n  summarize(media_diam = mean(diam)) |&gt; \n  ungroup()\n\n\n# Função de gráficos para cada tratamento\nplot_graf &lt;- function(data, tratam) {\n  ggplot(data, aes(x = dose, y = media_diam, color = factor(isolado), group = isolado)) +\n    geom_point()+\n    geom_line()+\n    facet_wrap(~aval)+\n    labs(title = paste(\"Tratamento:\", tratam),\n         x = \"Concentração\",\n         y = \"Diâmetro Micelial Médio (mm)\",\n         color = \"Isolados\")+\n    scale_color_jco()+\n    theme_minimal()+\n    theme(legend.position = \"bottom\" )\n}\n\n# Função para filtrar e plotar os gráficos para cada tratamento\nfor (tratam in unique(medias$trat)) {\n  data &lt;- medias |&gt;\n    filter(trat == tratam)\n  print(plot_graf(data, tratam))\n  dev.flush()\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Médias\nmedias &lt;- dados |&gt; \n  group_by(trat, dose, aval, isolado) |&gt; \n  summarize(media_diam = mean(diam)) |&gt; \n  ungroup()\n\n\n# Função de gráficos para cada tratamento\nplot_graf &lt;- function(data, tratam) {\n  ggplot(data, aes(x = dose, y = media_diam, color = factor(aval), group = aval)) +\n    geom_point()+\n    geom_line()+\n    facet_wrap(~isolado)+\n    labs(title = paste(\"Tratamento:\", tratam),\n         x = \"Concentração\",\n         y = \"Diâmetro Micelial Médio (mm)\",\n         color = \"Avaliação\")+\n    scale_color_jco()+\n    theme_minimal()+\n    theme(legend.position = \"bottom\" )\n}\n\n# Função para filtrar e plotar os gráficos para cada tratamento\nfor (tratam in unique(medias$trat)) {\n  data &lt;- medias |&gt;\n    filter(trat == tratam)\n  print(plot_graf(data, tratam))\n  dev.flush()\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmedias &lt;- dados |&gt; \n  group_by(trat, dose, aval, isolado) |&gt; \n  summarize(media_diam = mean(diam)) |&gt; \n  ungroup()\n\n\n# Função de gráficos para cada tratamento\nplot_graf &lt;- function(data, tratam) {\n  ggplot(data, aes(x = aval, y = media_diam, color = factor(dose), group = dose)) +\n    geom_point()+\n    geom_line()+\n    facet_wrap(~isolado)+\n    labs(title = paste(\"Tratamento:\", tratam),\n         x = \"Avaliações\",\n         y = \"Diâmetro Micelial Médio (mm)\",\n         color = \"Dose\")+\n    scale_color_jco()+\n    theme_minimal()+\n    theme(legend.position = \"bottom\" )\n}\n\n# Função para filtrar e plotar os gráficos para cada tratamento\nfor (tratam in unique(medias$trat)) {\n  data &lt;- medias |&gt;\n    filter(trat == tratam)\n  print(plot_graf(data, tratam))\n  dev.flush()\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMODELOS DE REGRESSÃO - USANDO DIAM\n\nlibrary(dplyr)\nlibrary(drc)\nlibrary(ggplot2)\n\n# Função para ajustar múltiplos modelos de dose-resposta e selecionar o melhor modelo\najustar_e_selecionar_melhor_modelo &lt;- function(dados, tratamento, isolado, avaliacao) {\n  data_filtrado &lt;- dados %&gt;%\n    filter(trat == tratamento, isolado == isolado, aval == avaliacao) %&gt;%\n    group_by(dose) %&gt;%\n    slice_head(n = 3) %&gt;%\n    ungroup()\n  \n  # Ajustar os modelos\n  modelo1 &lt;- tryCatch(drm(diam ~ dose, data = data_filtrado, fct = LN.3()), error = function(e) NULL)\n  modelo2 &lt;- tryCatch(drm(diam ~ dose, data = data_filtrado, fct = LL.3()), error = function(e) NULL)\n  modelo3 &lt;- tryCatch(drm(diam ~ dose, data = data_filtrado, fct = W1.3()), error = function(e) NULL)\n  modelo4 &lt;- tryCatch(drm(diam ~ dose, data = data_filtrado, fct = W2.3()), error = function(e) NULL)\n  \n  # Selecionar o melhor modelo com base no AIC\n  modelos &lt;- list(LN.3 = modelo1, LL.3 = modelo2, W1.3 = modelo3, W2.3 = modelo4)\n  modelos_validos &lt;- modelos[!sapply(modelos, is.null)]\n  \n  if (length(modelos_validos) &gt; 0) {\n    aic_values &lt;- sapply(modelos_validos, AIC, simplify = TRUE)\n    melhor_modelo &lt;- names(aic_values)[which.min(aic_values)]\n    return(list(modelo = modelos_validos[[melhor_modelo]], tipo = melhor_modelo, AIC = aic_values[melhor_modelo]))\n  } else {\n    return(NULL)\n  }\n}\n\n# Lista para armazenar os melhores modelos\nmelhores_modelos &lt;- list()\n\n# Lista de tratamentos, isolados e avaliações únicos\ntratamentos &lt;- unique(dados$trat)\nisolados &lt;- unique(dados$isolado)\navaliacoes &lt;- unique(dados$aval)\n\n# Iterar sobre todas as combinações de tratamento, isolado e avaliação\nfor (tratamento in tratamentos) {\n  for (isolado in isolados) {\n    for (avaliacao in avaliacoes) {\n      # Ajustar e selecionar o melhor modelo para a combinação atual\n      melhor_modelo &lt;- ajustar_e_selecionar_melhor_modelo(dados, tratamento, isolado, avaliacao)\n      chave &lt;- paste(tratamento, isolado, avaliacao, sep = \"-\")\n      melhores_modelos[[chave]] &lt;- melhor_modelo\n    }\n  }\n}\n\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\n\n# Função para plotar os dados e o melhor modelo\nplotar_melhor_modelo &lt;- function(dados, melhor_modelo, tratamento, isolado, avaliacao) {\n  data_filtrado &lt;- dados %&gt;%\n    filter(trat == tratamento, isolado == isolado, aval == avaliacao) %&gt;%\n    group_by(dose) %&gt;%\n    slice_head(n = 3) %&gt;%\n    ungroup()\n  \n  if (!is.null(melhor_modelo$modelo)) {\n    ggplot(data_filtrado, aes(x = dose, y = diam)) +\n      geom_point() +\n      geom_line(aes(y = predict(melhor_modelo$modelo)), color = 'blue') +\n      labs(title = paste(\"Tratamento:\", tratamento, \"Isolado:\", isolado, \"Avaliação:\", avaliacao),\n           subtitle = paste(\"Melhor modelo:\", melhor_modelo$tipo, \"AIC:\", round(melhor_modelo$AIC, 2)),\n           x = \"Dose\",\n           y = \"Diâmetro\") +\n      theme_minimal()\n  } else {\n    ggplot(data_filtrado, aes(x = dose, y = diam)) +\n      geom_point() +\n      labs(title = paste(\"Tratamento:\", tratamento, \"Isolado:\", isolado, \"Avaliação:\", avaliacao),\n           subtitle = \"Nenhum modelo ajustado\",\n           x = \"Dose\",\n           y = \"Diâmetro\") +\n      theme_minimal()\n  }\n}\n\n# Plotar os gráficos para cada combinação\nfor (chave in names(melhores_modelos)) {\n  comb &lt;- unlist(strsplit(chave, \"-\"))\n  tratamento &lt;- comb[1]\n  isolado &lt;- as.numeric(comb[2])\n  avaliacao &lt;- as.numeric(comb[3])\n  melhor_modelo &lt;- melhores_modelos[[chave]]\n  \n  print(plotar_melhor_modelo(dados, melhor_modelo, tratamento, isolado, avaliacao))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlibrary(ec50estimator)\ndf_ec50_LN &lt;- estimate_EC50(diam ~ dose,\n                         data = dados,\n                         isolate_col = \"isolado\",\n                         strata_col = c(\"trat\", \"aval\"),\n                         interval = \"delta\",\n                         fct = drc::LN.3())\n\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  valor inicial em 'vmmin' não é finito\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [1]\n\ndf_ec50_LL &lt;- estimate_EC50(diam ~ dose,\n                         data = dados,\n                         isolate_col = \"isolado\",\n                         strata_col = c(\"trat\", \"aval\"),\n                         interval = \"delta\",\n                         fct = drc::LL.3())\n\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  valor não finito fornecido por optim\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [1]\n\ndf_ec50_W1 &lt;- estimate_EC50(diam ~ dose,\n                         data = dados,\n                         isolate_col = \"isolado\",\n                         strata_col = c(\"trat\", \"aval\"),\n                         interval = \"delta\",\n                         fct = drc::W1.3())\n\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  valor inicial em 'vmmin' não é finito\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\n\ndf_ec50_W2 &lt;- estimate_EC50(diam ~ dose,\n                         data = dados,\n                         isolate_col = \"isolado\",\n                         strata_col = c(\"trat\", \"aval\"),\n                         interval = \"delta\",\n                         fct = drc::W2.3())\n\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [1]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [1]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  valor não finito fornecido por optim\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [1]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\n\nhead(df_ec50_LL)\n\n  ID trat aval    Estimate Std..Error      Lower     Upper\n1  1 Fox₢    1  93.4421518  28.332135  34.522252 152.36205\n2  2 Fox₢    1   0.4936527   4.651691  -9.180068  10.16737\n3  3 Fox₢    1  72.3221270  10.466677  50.555481  94.08877\n4  4 Fox₢    1 163.1277021  39.214661  81.576351 244.67905\n5  5 Fox₢    1   2.8077983  27.435214 -54.246852  59.86245\n6  6 Fox₢    1  11.1168899   6.680551  -2.776077  25.00986\n\n\n\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Função para criar o gráfico de EC50\nplot_ec50 &lt;- function(df_ec50, model_name) {\n  # Filtrar valores não positivos e maiores que 100\n  df_ec50 &lt;- df_ec50 %&gt;% filter(Estimate &gt; 0 & Estimate &lt; 100)\n  \n  # Visualização dos EC50s\n  p &lt;- as.data.frame(df_ec50) %&gt;% \n    mutate(ID = as.numeric(ID)) %&gt;% \n    ggplot(aes(ID, Estimate, color = trat)) +\n    geom_point(size = 2) +\n    geom_errorbar(aes(ymin = Lower, ymax = Upper, color = trat), width = 0) +\n    facet_wrap(~aval, scales = \"free_x\", ncol = 2) +\n    scale_y_log10() +\n    scale_x_continuous(breaks = 1:9) +\n    scale_color_manual(values = c(\"darkred\", \"steelblue\", \"darkgreen\")) +\n    labs(x = \"Isolados\", y = \"EC50\", title = paste(\"Modelo:\", model_name)) +\n    theme_minimal() +\n    coord_flip() +\n    theme(axis.text.y = element_text(angle = 90, vjust = 0.5, hjust = 1), legend.position = \"bottom\")\n  \n  return(p)\n}\n\n# Criar gráficos para cada modelo\nplot_LN &lt;- plot_ec50(df_ec50_LN, \"LN.3\")\nplot_LL &lt;- plot_ec50(df_ec50_LL, \"LL.3\")\nplot_W1 &lt;- plot_ec50(df_ec50_W1, \"W1.3\")\nplot_W2 &lt;- plot_ec50(df_ec50_W2, \"W2.3\")\n\n# Exibir os gráficos\nprint(plot_LN)\n\n\n\n\n\n\n\nprint(plot_LL)\n\n\n\n\n\n\n\nprint(plot_W1)\n\n\n\n\n\n\n\nprint(plot_W2)"
  },
  {
    "objectID": "projeto_final (1) - Copia.html#carregando-o-dataset",
    "href": "projeto_final (1) - Copia.html#carregando-o-dataset",
    "title": "Projeto Final da Disciplina de Análise e Visualização de Dados em Fitopatologia - FIP606",
    "section": "",
    "text": "Para a leitura e importação de dados em Excel, utilizaremos o pacote readxl, para isso é necessário que instale e carregue este pacote. O pacote readxl, permite a leitura de arquivos Excel (.xlsx) sendo especialmente útil para importar dados que são frequentemente armazenados em planilhas.\n\nlibrary(readxl)\ndados &lt;- read_excel(\"SensibilidadeCory2020.xlsx\")\nhead(dados)\n\n# A tibble: 6 × 7\n  trat   aval isolado  dias   rep  dose  diam\n  &lt;chr&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Fox₢      1       1     2     1     0  23.5\n2 Fox₢      1       1     2     2     0  21.4\n3 Fox₢      1       1     2     3     0  20.0\n4 Fox₢      1       2     2     1     0  25.6\n5 Fox₢      1       2     2     2     0  26.4\n6 Fox₢      1       2     2     3     0  26.3"
  },
  {
    "objectID": "projeto_final (1) - Copia.html#visualização-de-dados",
    "href": "projeto_final (1) - Copia.html#visualização-de-dados",
    "title": "Projeto Final da Disciplina de Análise e Visualização de Dados em Fitopatologia - FIP606",
    "section": "",
    "text": "library(ggsci)\n\n# Médias\nmedias &lt;- dados |&gt; \n  group_by(trat,dose, aval, isolado) |&gt; \n  summarize(media_diam = mean(diam)) |&gt; \n  ungroup()\n\n\n# Função de gráficos para cada tratamento\nplot_graf &lt;- function(data, tratam) {\n  ggplot(data, aes(x = dose, y = media_diam, color = factor(isolado), group = isolado)) +\n    geom_point()+\n    geom_line()+\n    facet_wrap(~aval)+\n    labs(title = paste(\"Tratamento:\", tratam),\n         x = \"Concentração\",\n         y = \"Diâmetro Micelial Médio (mm)\",\n         color = \"Isolados\")+\n    scale_color_jco()+\n    theme_minimal()+\n    theme(legend.position = \"bottom\" )\n}\n\n# Função para filtrar e plotar os gráficos para cada tratamento\nfor (tratam in unique(medias$trat)) {\n  data &lt;- medias |&gt;\n    filter(trat == tratam)\n  print(plot_graf(data, tratam))\n  dev.flush()\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Médias\nmedias &lt;- dados |&gt; \n  group_by(trat, dose, aval, isolado) |&gt; \n  summarize(media_diam = mean(diam)) |&gt; \n  ungroup()\n\n\n# Função de gráficos para cada tratamento\nplot_graf &lt;- function(data, tratam) {\n  ggplot(data, aes(x = dose, y = media_diam, color = factor(aval), group = aval)) +\n    geom_point()+\n    geom_line()+\n    facet_wrap(~isolado)+\n    labs(title = paste(\"Tratamento:\", tratam),\n         x = \"Concentração\",\n         y = \"Diâmetro Micelial Médio (mm)\",\n         color = \"Avaliação\")+\n    scale_color_jco()+\n    theme_minimal()+\n    theme(legend.position = \"bottom\" )\n}\n\n# Função para filtrar e plotar os gráficos para cada tratamento\nfor (tratam in unique(medias$trat)) {\n  data &lt;- medias |&gt;\n    filter(trat == tratam)\n  print(plot_graf(data, tratam))\n  dev.flush()\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmedias &lt;- dados |&gt; \n  group_by(trat, dose, aval, isolado) |&gt; \n  summarize(media_diam = mean(diam)) |&gt; \n  ungroup()\n\n\n# Função de gráficos para cada tratamento\nplot_graf &lt;- function(data, tratam) {\n  ggplot(data, aes(x = aval, y = media_diam, color = factor(dose), group = dose)) +\n    geom_point()+\n    geom_line()+\n    facet_wrap(~isolado)+\n    labs(title = paste(\"Tratamento:\", tratam),\n         x = \"Avaliações\",\n         y = \"Diâmetro Micelial Médio (mm)\",\n         color = \"Dose\")+\n    scale_color_jco()+\n    theme_minimal()+\n    theme(legend.position = \"bottom\" )\n}\n\n# Função para filtrar e plotar os gráficos para cada tratamento\nfor (tratam in unique(medias$trat)) {\n  data &lt;- medias |&gt;\n    filter(trat == tratam)\n  print(plot_graf(data, tratam))\n  dev.flush()\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMODELOS DE REGRESSÃO - USANDO DIAM\n\nlibrary(dplyr)\nlibrary(drc)\nlibrary(ggplot2)\n\n# Função para ajustar múltiplos modelos de dose-resposta e selecionar o melhor modelo\najustar_e_selecionar_melhor_modelo &lt;- function(dados, tratamento, isolado, avaliacao) {\n  data_filtrado &lt;- dados %&gt;%\n    filter(trat == tratamento, isolado == isolado, aval == avaliacao) %&gt;%\n    group_by(dose) %&gt;%\n    slice_head(n = 3) %&gt;%\n    ungroup()\n  \n  # Ajustar os modelos\n  modelo1 &lt;- tryCatch(drm(diam ~ dose, data = data_filtrado, fct = LN.3()), error = function(e) NULL)\n  modelo2 &lt;- tryCatch(drm(diam ~ dose, data = data_filtrado, fct = LL.3()), error = function(e) NULL)\n  modelo3 &lt;- tryCatch(drm(diam ~ dose, data = data_filtrado, fct = W1.3()), error = function(e) NULL)\n  modelo4 &lt;- tryCatch(drm(diam ~ dose, data = data_filtrado, fct = W2.3()), error = function(e) NULL)\n  \n  # Selecionar o melhor modelo com base no AIC\n  modelos &lt;- list(LN.3 = modelo1, LL.3 = modelo2, W1.3 = modelo3, W2.3 = modelo4)\n  modelos_validos &lt;- modelos[!sapply(modelos, is.null)]\n  \n  if (length(modelos_validos) &gt; 0) {\n    aic_values &lt;- sapply(modelos_validos, AIC, simplify = TRUE)\n    melhor_modelo &lt;- names(aic_values)[which.min(aic_values)]\n    return(list(modelo = modelos_validos[[melhor_modelo]], tipo = melhor_modelo, AIC = aic_values[melhor_modelo]))\n  } else {\n    return(NULL)\n  }\n}\n\n# Lista para armazenar os melhores modelos\nmelhores_modelos &lt;- list()\n\n# Lista de tratamentos, isolados e avaliações únicos\ntratamentos &lt;- unique(dados$trat)\nisolados &lt;- unique(dados$isolado)\navaliacoes &lt;- unique(dados$aval)\n\n# Iterar sobre todas as combinações de tratamento, isolado e avaliação\nfor (tratamento in tratamentos) {\n  for (isolado in isolados) {\n    for (avaliacao in avaliacoes) {\n      # Ajustar e selecionar o melhor modelo para a combinação atual\n      melhor_modelo &lt;- ajustar_e_selecionar_melhor_modelo(dados, tratamento, isolado, avaliacao)\n      chave &lt;- paste(tratamento, isolado, avaliacao, sep = \"-\")\n      melhores_modelos[[chave]] &lt;- melhor_modelo\n    }\n  }\n}\n\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\n\n# Função para plotar os dados e o melhor modelo\nplotar_melhor_modelo &lt;- function(dados, melhor_modelo, tratamento, isolado, avaliacao) {\n  data_filtrado &lt;- dados %&gt;%\n    filter(trat == tratamento, isolado == isolado, aval == avaliacao) %&gt;%\n    group_by(dose) %&gt;%\n    slice_head(n = 3) %&gt;%\n    ungroup()\n  \n  if (!is.null(melhor_modelo$modelo)) {\n    ggplot(data_filtrado, aes(x = dose, y = diam)) +\n      geom_point() +\n      geom_line(aes(y = predict(melhor_modelo$modelo)), color = 'blue') +\n      labs(title = paste(\"Tratamento:\", tratamento, \"Isolado:\", isolado, \"Avaliação:\", avaliacao),\n           subtitle = paste(\"Melhor modelo:\", melhor_modelo$tipo, \"AIC:\", round(melhor_modelo$AIC, 2)),\n           x = \"Dose\",\n           y = \"Diâmetro\") +\n      theme_minimal()\n  } else {\n    ggplot(data_filtrado, aes(x = dose, y = diam)) +\n      geom_point() +\n      labs(title = paste(\"Tratamento:\", tratamento, \"Isolado:\", isolado, \"Avaliação:\", avaliacao),\n           subtitle = \"Nenhum modelo ajustado\",\n           x = \"Dose\",\n           y = \"Diâmetro\") +\n      theme_minimal()\n  }\n}\n\n# Plotar os gráficos para cada combinação\nfor (chave in names(melhores_modelos)) {\n  comb &lt;- unlist(strsplit(chave, \"-\"))\n  tratamento &lt;- comb[1]\n  isolado &lt;- as.numeric(comb[2])\n  avaliacao &lt;- as.numeric(comb[3])\n  melhor_modelo &lt;- melhores_modelos[[chave]]\n  \n  print(plotar_melhor_modelo(dados, melhor_modelo, tratamento, isolado, avaliacao))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlibrary(ec50estimator)\ndf_ec50_LN &lt;- estimate_EC50(diam ~ dose,\n                         data = dados,\n                         isolate_col = \"isolado\",\n                         strata_col = c(\"trat\", \"aval\"),\n                         interval = \"delta\",\n                         fct = drc::LN.3())\n\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  valor inicial em 'vmmin' não é finito\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [1]\n\ndf_ec50_LL &lt;- estimate_EC50(diam ~ dose,\n                         data = dados,\n                         isolate_col = \"isolado\",\n                         strata_col = c(\"trat\", \"aval\"),\n                         interval = \"delta\",\n                         fct = drc::LL.3())\n\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  valor não finito fornecido por optim\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [1]\n\ndf_ec50_W1 &lt;- estimate_EC50(diam ~ dose,\n                         data = dados,\n                         isolate_col = \"isolado\",\n                         strata_col = c(\"trat\", \"aval\"),\n                         interval = \"delta\",\n                         fct = drc::W1.3())\n\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  valor inicial em 'vmmin' não é finito\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\n\ndf_ec50_W2 &lt;- estimate_EC50(diam ~ dose,\n                         data = dados,\n                         isolate_col = \"isolado\",\n                         strata_col = c(\"trat\", \"aval\"),\n                         interval = \"delta\",\n                         fct = drc::W2.3())\n\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [1]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [1]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  valor não finito fornecido por optim\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [1]\nError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  : \n  non-finite finite-difference value [3]\n\nhead(df_ec50_LL)\n\n  ID trat aval    Estimate Std..Error      Lower     Upper\n1  1 Fox₢    1  93.4421518  28.332135  34.522252 152.36205\n2  2 Fox₢    1   0.4936527   4.651691  -9.180068  10.16737\n3  3 Fox₢    1  72.3221270  10.466677  50.555481  94.08877\n4  4 Fox₢    1 163.1277021  39.214661  81.576351 244.67905\n5  5 Fox₢    1   2.8077983  27.435214 -54.246852  59.86245\n6  6 Fox₢    1  11.1168899   6.680551  -2.776077  25.00986\n\n\n\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Função para criar o gráfico de EC50\nplot_ec50 &lt;- function(df_ec50, model_name) {\n  # Filtrar valores não positivos e maiores que 100\n  df_ec50 &lt;- df_ec50 %&gt;% filter(Estimate &gt; 0 & Estimate &lt; 100)\n  \n  # Visualização dos EC50s\n  p &lt;- as.data.frame(df_ec50) %&gt;% \n    mutate(ID = as.numeric(ID)) %&gt;% \n    ggplot(aes(ID, Estimate, color = trat)) +\n    geom_point(size = 2) +\n    geom_errorbar(aes(ymin = Lower, ymax = Upper, color = trat), width = 0) +\n    facet_wrap(~aval, scales = \"free_x\", ncol = 2) +\n    scale_y_log10() +\n    scale_x_continuous(breaks = 1:9) +\n    scale_color_manual(values = c(\"darkred\", \"steelblue\", \"darkgreen\")) +\n    labs(x = \"Isolados\", y = \"EC50\", title = paste(\"Modelo:\", model_name)) +\n    theme_minimal() +\n    coord_flip() +\n    theme(axis.text.y = element_text(angle = 90, vjust = 0.5, hjust = 1), legend.position = \"bottom\")\n  \n  return(p)\n}\n\n# Criar gráficos para cada modelo\nplot_LN &lt;- plot_ec50(df_ec50_LN, \"LN.3\")\nplot_LL &lt;- plot_ec50(df_ec50_LL, \"LL.3\")\nplot_W1 &lt;- plot_ec50(df_ec50_W1, \"W1.3\")\nplot_W2 &lt;- plot_ec50(df_ec50_W2, \"W2.3\")\n\n# Exibir os gráficos\nprint(plot_LN)\n\n\n\n\n\n\n\nprint(plot_LL)\n\n\n\n\n\n\n\nprint(plot_W1)\n\n\n\n\n\n\n\nprint(plot_W2)"
  }
]